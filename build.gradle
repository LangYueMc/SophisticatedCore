buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://server.bbkr.space/artifactory/libs-release/" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "fabric-loom" version "1.2.+"

    id "io.github.juuxel.loom-vineflower" version "1.11.0" // Vineflower, a better decompiler
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build

    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.mod_id
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    mavenCentral()

    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = 'https://maven.parchmentmc.org' } // Parchment

    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib, Forge Tags, serialization-hooks
    maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
    maven {// Forge Config API Port
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    maven { url = "https://maven.terraformersmc.com/releases/" } // Emi
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
    maven { url = "https://modmaven.dev" } // Jei
    maven { url = "https://www.cursemaven.com" } // Balm, CraftingTweaks
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.module.name == "fabric-loader") {
            useVersion(loader_version)
        }
    }
}

dependencies {
    setup(dependencies)
    devEnv(dependencies)
    compat(dependencies)
    dependencies(dependencies)
    testing(dependencies)
}

def setup(DependencyHandler deps) {
    deps.minecraft("com.mojang:minecraft:$minecraft_version")
    deps.mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
        if (parchment_version != "none")
            it.parchment("org.parchmentmc.data:parchment-$parchment_version@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    deps.modImplementation("net.fabricmc:fabric-loader:$loader_version")
}

def devEnv(DependencyHandler deps) {
    deps.modLocalRuntime("maven.modrinth:lazydfu:$lazy_dfu_version")
    deps.modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")
    deps.modLocalRuntime("curse.maven:balm-500525:${balm_cf_file_id}")
    deps.modLocalRuntime("curse.maven:craftingtweaks-502516:${crafting_tweaks_cf_file_id}")
    deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
    deps.modLocalRuntime("curse.maven:config-menus-forge-544048:$config_menu_version")
}

def dependencies(DependencyHandler deps) {
    deps.modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

    for (String module in port_lib_modules.split(",")) {
        deps.modApi(deps.include("io.github.fabricators_of_create.Porting-Lib:${module.trim()}:$port_lib_version+$minecraft_version"))
    }

    // Forge Config Api Ports recommended way to implement this is to use their github repo, also include it as a jar-in-jar
    deps.modApi(deps.include("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$forge_config_api_port_version"))

    deps.modApi(deps.include("teamreborn:energy:$energy_version")) {
        exclude(group: "net.fabricmc.fabric-api")
    }

    deps.api(deps.include("com.google.code.findbugs:jsr305:$jsr305_version"))

    deps.implementation(deps.include("com.github.llamalad7.mixinextras:mixinextras-fabric:$mixin_extras_version"))
    deps.annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:$mixin_extras_version")
}

def compat(DependencyHandler deps) {
    deps.modCompileOnly("com.terraformersmc:modmenu:$modmenu_version")
    deps.modCompileOnly("curse.maven:balm-500525:${balm_cf_file_id}")
    deps.modCompileOnly("curse.maven:craftingtweaks-502516:${crafting_tweaks_cf_file_id}")

    recipeViewers(deps)
}

def recipeViewers(DependencyHandler deps) {
    // EMI
    deps.modCompileOnly("dev.emi:emi-fabric:$emi_version") { transitive = false }
    // JEI
    deps.modCompileOnly("mezz.jei:jei-$minecraft_version-fabric:$jei_version") { transitive = false }
    // REI
    deps.modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version")
    deps.modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version")

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
        case "jei": deps.modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

def testing(DependencyHandler deps) {
    deps.testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.+'
    deps.testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.+'
    deps.testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.+'
    deps.testImplementation "org.mockito:mockito-core:5.1.+"
}

loom {
    accessWidenerPath = file("src/main/resources/sophisticatedcore.accesswidener")

    sourceSets {
        main {
            resources {
                srcDir("src/generated/resources")
                exclude("src/generated/resources/.cache")
            }
        }
    }

    runs {
        datagen {
            client()
            ideConfigGenerated = true

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=$mod_id"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
            vmArg "-Dmixin.debug.export=true"
            source sourceSets.main
            runDir "run/test_client"
        }

        client {
            client()
            ideConfigGenerated = true

            vmArg "-Dmixin.debug.export=true"
            source sourceSets.main
            runDir "run/test_client"
        }
        server {
            server()
            ideConfigGenerated = true

            vmArg "-Dmixin.debug.export=true"
            source sourceSets.main
            runDir "run/test_server"
        }
        /*gametest {
            server()
            name "Test"
            source sourceSets.main
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "run/gametest_server"
        }*/
    }
}

/*test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}*/

machete {
    enabled = System.getenv("GITHUB_RUN_NUMBER") != null
}

tasks.register("buildOrPublish") {
    group = "build"
    String mavenUser = System.getenv("MAVEN_USER")
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.named("publish"))
        println("prepared for publish")
    } else {
        dependsOn(tasks.named("build"))
        println("prepared for build")
    }
}

processResources {
    exclude("**/*.bbmodel", "**/*.lnk")

    Map<String, Object> properties = [
        "mod_id": project.mod_id,
        "mod_version": project.mod_version,
        "minecraft_version": minecraft_version,
        "loader_version": loader_version,
        "fabric_version": fabric_version,
        "forge_config_version": project.forge_config_api_port_version,
        "energy_version": project.energy_version
    ]
    for (String module in port_lib_modules.split(","))
        properties.put("port_lib_${module}_version".toString(), port_lib_version)

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }

    filesMatching("sophisticatedcore.mixins.json") {
        expand "archivesBaseName": archivesBaseName
    }

    duplicatesStrategy = DuplicatesStrategy.WARN
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }

    manifest {
        attributes(["Specification-Title"     : "${project.mod_id}",
                    "Specification-Vendor"    : "p3pp3rf1y",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${project.version}",
                    "Implementation-Vendor"   : "p3pp3rf1y",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")]
        )
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/SophisticatedCore")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'sophisticatedcore-fabric'
            from(components.java)
        }
    }
}
